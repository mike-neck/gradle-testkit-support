plugins {
    id 'groovy'
    id 'idea'
    id "org.mikeneck.rule-based-model-generation" version "0.2.1"
    id 'com.gradle.plugin-publish' version '0.9.1'
}

ext {
    jdkLevel = 1.8
    encoding = 'UTF-8'
}

version = '0.1'
group = 'org.mikeneck.gradle.plugin'

repositories {
    mavenCentral()
}

configurations {
    gradleDep {
        description = 'Gradle Apis'
    }
}

dependencies {
    compile 'org.jetbrains:annotations:13.0'
    compile 'org.yaml:snakeyaml:1.15'
    gradleDep gradleApi()
    compile configurations.gradleDep
    testCompile gradleTestKit()
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'
}

tasks.withType(JavaCompile) {
    it.sourceCompatibility = jdkLevel
    it.targetCompatibility = jdkLevel
    it.options.encoding = encoding
}

idea {
    project {
        languageLevel = jdkLevel
        vcs = 'Git'
    }
}

task listDepencencies {
    def deps = configurations.runtime - configurations.gradleDep
    def list = deps.findAll {
        !it.isDirectory()
    }.collect {
        it.absolutePath
    }.sort { it }
    def destDir = file('build/listDependencies')
    def outputFile = file('build/listDependencies/dependencies.txt')

    description = 'List up dependency files.'

    outputs.file outputFile

    outputs.upToDateWhen {
        if (!outputFile.exists()) {
            return false
        } else {
            def tmp = []
            outputFile.text.eachLine {
                tmp << it
            }
            def listed = tmp.sort {it}
            return list == listed
        }
    }

    doLast {
        if(!destDir.exists()) {
            destDir.mkdirs()
        }
        outputFile.write(list.join('\n'), 'UTF-8')
    }
}

task prepareTest(type: Copy, dependsOn: 'listDepencencies') {
    group = 'Prepare Test'
    description = 'List up dependency files.'

    def files = tasks['listDepencencies'].outputs.files

    from files
    into file('src/test/resources/dependencies/')

    outputs.upToDateWhen {
        def depFile = file('src/test/resources/dependencies/dependencies.txt')
        if (!depFile.exists()) {
            return false
        } else {
            return depFile.text == files[0].text
        }
    }
}

test {
    maxParallelForks = 4
}

model {
    metaModel {
        srcDir = 'src/main/groovy'
        packageName = 'org.mikeneck.gradle.plugin.model'
        classes.create {
            name = 'TestKitSupport'
            type = INTERFACE
            fields.create {
                name = 'testSrcDir'
                type = STRING
            }
            fields.create {
                name = 'packageName'
                type = STRING
            }
            fields.create {
                name = 'className'
                type = STRING
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/mike-neck/gradle-testkit-support'
    vcsUrl = 'https://github.com/mike-neck/gradle-testkit-support'
    description = """|Gradle testKit support plugin.
            |This plugin requires Gradle 2.6 above and Java SE8.
            |""".stripMargin()
    plugins {
        testKitSupport {
            id = 'org.mikeneck.gradle-testkit-support-plugin'
            tags = ['test']
            displayName = 'Gradle Test-Kit support plugin'
        }
    }
}

if(file('experimental.gradle').exists()) {
    apply from: 'experimental.gradle'
}
